parameters:
  # parameters should default to values for running in the External / Public
  # be read from a user-defined variable (Azure DevOps limitation)
  agentPoolName: NetCore-Public
  agentPool: Build.Windows.10.Amd64.VS2019.Pre.Open
  runAsPublic: true                      
  repoName: dotnet/winforms     

jobs:
- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    runAsPublic: ${{ parameters.runAsPublic }}
    enableMicrobuild: true
    enablePublishBuildArtifacts: true
    enablePublishTestResults: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    helixRepo: $(repoName)

    jobs:
    - job: Windows_NT
      pool: 
        name: ${{ parameters.agentPoolName }}
        demands: ImageOverride -equals ${{ parameters.agentPool }}

      variables:
        # needed for darc (dependency flow) publishing
        - name: _OfficialBuildIdArgs
          value: ''

        # needed for signing
        - name: _SignArgs
          value: ''
        - name: _TeamName
          value: DotNetCore
        - name: _SignType
          value: test
        - name: _Sign
          value: true

        # needed for publishing
        - name: _PublishArgs
          value: ''
        - name: _PublishType
          value: none
        - name: _DotNetPublishToBlobFeed
          value: false

        # Override some values if we're building internally
        - ${{ if eq(parameters.runAsPublic, 'false') }}:

          - name: _OfficialBuildIdArgs
            value: /p:OfficialBuildId=$(BUILD.BUILDNUMBER)

          # note: You have to use list syntax here (-name: value) or you will get errors about declaring the same variable multiple times
          - name: _SignType
            value: real

          - name: _PublishType
            value: blob
          - group: DotNet-Blob-Feed
          - name: _PublishBlobFeedUrl
            value: https://dotnetfeed.blob.core.windows.net/dotnet-windowsdesktop/index.json
          - name: _DotNetPublishToBlobFeed
            value: true
          - group: DotNet-Symbol-Server-Pats

          # note: Even though they are referenced here, user defined variables (like $(_SignType)) are not resolved 
          # until the agent is running on the machine. They can be overridden any time before they are resolved,
          # like in the job matrix below (see Build_Debug)

          - name: _SignArgs
            value: /p:DotNetSignType=$(_SignType) 
              /p:TeamName=$(_TeamName) 
              /p:Sign=$(_Sign)

          - name: _PublishArgs
            value: /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
              /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
              /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
              /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
              /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)

      strategy:
        matrix:
          Build_Debug:
            _BuildConfig: Debug
            # override some variables for debug
            _SignType: test
            _PublishType: none            
            _DotNetPublishToBlobFeed : false
          Build_Release:
            _BuildConfig: Release

      steps:
      - checkout: self
        clean: true

      # Build and rename binlog
      - script: eng\cibuild.cmd
          -restore
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs)
          -build
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\Build.binlog          
        displayName: Build

      # Create Nuget package, sign, and publish; and rename binlog
      - script: eng\cibuild.cmd
          -configuration $(_BuildConfig)
          $(_OfficialBuildIdArgs)
          -restore
          -pack
          -sign $(_SignArgs)
          -publish $(_PublishArgs)
          /bl:$(BUILD.SOURCESDIRECTORY)\artifacts\log\$(_BuildConfig)\PackSignPublish.binlog
        displayName: Pack, Sign, and Publish
      
      - ${{ if eq(parameters.runAsPublic, 'false') }}:

        # Publish the vsix as a build artifact (only for release, ensuring package contents are real-signed)
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'ChartWin'
            targetPath: '$(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)/Shipping'
          displayName: Publish Package to build artifacts
          continueOnError: true
          condition: and(succeeded(), eq(variables['_BuildConfig'], 'Release'))
